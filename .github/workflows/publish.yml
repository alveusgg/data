name: Publish

on:
  push:

jobs:
  check:
    runs-on: ubuntu-latest

    outputs:
      description: "New version identifier (if changed)"
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          sparse-checkout: package.json

      - name: Check version
        id: version
        run: |
          set -e -o pipefail
          PREVIOUS_COMMIT=$(git rev-parse HEAD^1)
          BEFORE_VERSION=$(git show "${{ github.event.created && '$PREVIOUS_COMMIT' || github.event.before }}:package.json" | jq -r .version)
          AFTER_VERSION=$(git show "${{ github.event.after }}:package.json" | jq -r .version)
      
          if [ "$BEFORE_VERSION" != "$AFTER_VERSION" ]; then
            echo "Version changed from $BEFORE_VERSION to $AFTER_VERSION"
            echo "version=$AFTER_VERSION" >> "$GITHUB_OUTPUT"
          fi

  tag:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    # We only tag on pushes to main, when the version has changed
    needs: check
    if: ${{ github.ref == 'refs/heads/main' && needs.check.outputs.version != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: package.json

      - name: Tag version
        run: |
          set -e -o pipefail
          git tag "${{ needs.check.outputs.version }}" "${{ github.event.after }}"
          git push origin "${{ needs.check.outputs.version }}"

  publish:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    # Version changes in any branch can be published
    needs: check
    if: ${{ needs.check.outputs.version != '' }}

    steps:
      - name: Checkout commit
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: .nvmrc
          cache: npm

      - name: Authenticate GitHub Package Registry
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Cache optimized assets
        id: cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: node_modules/.cache/optimize
          key: optimized-assets-${{ hashFiles('src/**/*.png', 'src/**/*.jpg', 'src/**/*.jpeg') }}
          restore-keys: |
            optimized-assets-

      - name: Restore latest assets
        if: ${{ steps.cache.outputs.cache-hit == '' }}
        run: |
          set -e -o pipefail
          echo "No GitHub cache hit, restoring from latest package release"

          # Extract the latest package in a temporary directory
          TMP_DIR=$(mktemp -d)
          npm pack @alveusgg/data@latest --pack-destination ${TMP_DIR}
          tar -xzf ${TMP_DIR}/*.tgz -C ${TMP_DIR} --strip-components=1

          # Copy all build assets to the cache directory
          mkdir -p node_modules/.cache/optimize/build
          find ${TMP_DIR}/build -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" \) -exec cp {} node_modules/.cache/optimize/build \;

          # Clean up the temporary directory
          rm -rf ${TMP_DIR}

      - name: Install dependencies
        run: npm ci

      # If this push wasn't to main, add the commit hash to the version
      - name: Update version
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          set -e -o pipefail
          CURRENT_VERSION=$(jq -r .version package.json)
          NEW_VERSION="$CURRENT_VERSION-pre.${{ github.event.after }}"
          npm version --no-git-tag-version "$NEW_VERSION"
      
      - name: Build package
        run: npm run build

      - name: Publish package
        run: npm publish --access public --tag ${{ github.ref == 'refs/heads/main' && 'latest' || 'pre' }}

      - name: Report summary
        run: |
          set -e -o pipefail
          PACKAGE_NAME=$(jq -r .name package.json)
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "::notice title=Version published::\`$PACKAGE_NAME@$CURRENT_VERSION\`"
          echo "### Version published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME@$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pnpm add $PACKAGE_NAME@$CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
